
%%  q=2, c=1. r=2. d=c*r. %%  > black lose!
%%  q=2, c=1. r=4. d=c*r. %%  > black lose!

%%  q=2, c=2. r=2. d=c*r. %%  > black win!
%%  q=2, c=3. r=2. d=c*r. %%  > black win!
%%  q=2, c=3. r=3. d=c*r. %%  > black win!

%%  q=3, c=3. r=3. d=c*r. %%  > black win!
%%  q=3, c=4. r=3. d=c*r. %%  > black win!
%%  q=3, c=4. r=4. d=c*r. %%  > black win!
%%  q=3, c=5. r=5. d=c*r. %%  > black win!

%%  q=4, c=4. r=4. d=c*r. %%  > draw !
%%  q=4, c=6. r=4. d=c*r. %%  > white win!
%%  q=4, c=6. r=7. d=c*r. %%  > black win!
%%  q=4, c=7. r=6. d=c*r. %%  > original! black win!

%% %% easy
#const q=3.
#const c=3. 
#const r=3. 
#const d=5. 
%#const d=c*r.
%#const d=2*((c*r+1)/2)-1. 

connect[0..q-1].

black[1].
white[0].
player[0..1].
dir[0..1].

domR0[0..r].
domR[1..r].
domC[1..c].

domC[C], domR[R] => dom[C,R]. 

domT0[0..d].
domT[1..d].
domT[T] => turn[T,T#mod2]. 

domC[C], domC[I], 2**(I-1) <= c => chooseC[C,I-1,((C-1)/(2**(I-1)))#mod2]. 
chooseC[_,I,_] => bitC[I]. 

move(1,1,1).
move(0,3,2).
move(1,2,3).
~occupied(2,2,3).
%occupied(2,2,4).
occupied(2,1,3).
%~board(2,2).
%moveL(0,4).
%~moveL(1,4).
%move(0,2,4).
%move(1,3,5).


domT[T]                          => #exist(T-1) , time(T).
%white[A], bitC[I], turn[T,A], T>2    => #forall(T), moveL(I,T).  %% FIXME
white[A], bitC[I], turn[T,A]     => #exist(T), moveL(I,T).  %% FIXME
black[A], bitC[I], turn[T,A]     => #exist(T), moveL(I,T). 
turn[T,A], domC[C]               => #exist(T) , move(A,C,T).    
%domC[C], domR0[R], domT0[T], R <= T  => #exist(T) , occupied(C,R,T). 
domC[C], domR0[R], domT0[T]      => #exist(T) , occupied(C,R,T). 
dom[C,R]                         => #exist(d) , board(C,R).
dom[C,R], C+(q-1)<=c, R<=r       => #exist(d) , win(C,R,1).  
dom[C,R], C<=c , R+(q-1)<=r      => #exist(d) , win(C,R,2).  
dom[C,R], C+q-1<=c,R+q-1<=r      => #exist(d) , win(C,R,3).  
dom[C,R], C+q-1<=c,R+q-1<=r      => #exist(d) , win(C,R,4).  

~time(T+1), time(T).
%% white[A], turn[T,A] => ~time(T), time(T+1). %% Dont stop game at whites turn; optional

~move(_,_,T), time(T).   %% When game is over, no more moves allowed
~time(T), move(_,C,T):domC[C].  %% game is running, make at last one move

%%black[A],  init[A,C,R] => board[C,R].
%%white[A],  init[A,C,R] => ~board[C,R].
%%dom[C,R], ~init[_,C,R] => ~occupied(C,1,0).
%%           init[_,C,R] => occupied[C,R,d].

%domC[C], domR[R] => ~occupied(C,R,0).
~occupied(_C,1,0).
occupied(_C,0,0).

black[A], chooseC[C,I,0] => ~move(A,C,T), ~moveL(I,T).
black[A], chooseC[C,I,1] => ~move(A,C,T), moveL(I,T).

white[A], chooseC[C,I,0] => ~move(A,C,T), ~moveL(I,T). %%FIXME
white[A], chooseC[C,I,1] => ~move(A,C,T), moveL(I,T).%%FIXME

%%white[A], domC[C] => %% UNFIXME
%%    occupied(C,r,T-1),    %% Column is not completely full 
%%    ~time(T),           %% Game is still running 
%%     moveL(I,T) : chooseC[C,I,0], 
%%    ~moveL(I,T) : chooseC[C,I,1], 
%%    move(A,C,T).        %% White makes a move in column C!

~occupied(C,R,T-1),   occupied(C,R,T).  %% board positions dont change
~occupied(C,R+1,T+1), occupied(C,R,T).  %% no jumps  (implies gravity)
~move(_A,C,T), ~occupied(C,R-1,T-1), occupied(C,R,T). 
move(_,C,T), occupied(C,R,T-1), ~occupied(C,R,T).  %% if board changes, then column must be played
~move(_,C,T), ~occupied(C,r,T-1). %% No moves in a column that was full in previous T

%~occupied(C,R-1,T-1), occupied(C,R,T-1), ~move(_A,C,T), board(C,R,T). 


occupied(C,R,d), ~board(C,R).
white[A], turn[T,A] => occupied(C,R,T-1), ~occupied(C,R,T), ~board(C,R).

%black[A], turn[T,A] => occupied(C,R,T-1), ~occupied(C,R,T), board(C,R), debug(1).

%% Winning Positions
dom[C,R] => board(C+D,R):connect[D], ~occupied(C+D,R,d):connect[D].
dom[C,R] => board(C,R+D):connect[D], ~occupied(C,R+D,d):connect[D].
dom[C,R] => board(C+D,R+D):connect[D], ~occupied(C+D,R+D,d):connect[D].
dom[C,R] => board(C+D,R-D):connect[D], ~occupied(C+D,R-D,d):connect[D].

connect[D] => ~win(C,R,1), board(C+D,R).
connect[D] => ~win(C,R,2), board(C,R+D).
connect[D] => ~win(C,R,3), board(C+D,R+D).
connect[D] => ~win(C,R,4), board(C+D,R-D).
win(C,R,_) : #true.
