

===================


dom[X,Y] :: #forall(X+1), move(X,Y)?
dom[X,Y] :: #exist(X), move(X,Y)?

-> 

dom[X,Y] :: move(X,Y) @ X+1 ?
dom[X,Y] :: move(X,Y) @ X !
dom[X,Y] :: move(X,Y) @!

------------------

![X+1] , dom[X,Y] :: move(X,Y).
?[X], dom[X,Y] :: move(X,Y).

===================


%%p[X,Y] -> p(X,Y). 


dom[X],dom[Y] :: move[X,Y].  %% also generates move(X,Y). 


Examples: 
------

%% %% easy
#const q=2.
#const c=2. 
#const r=2. 
#const d=2. 
%#const d=c*r.
%#const d=2*((c*r+1)/2)-1. 

connect[0..q-1].

% direction: used in the different winning configurations.
dir[0..1].

% domains for Row and Column . 
domR0[0..r].
domR[1..r].
domC[1..c].


%time steps domain. Time starts with 1 with black. 0 represents before the games starts. 
domT0[0..d].
time[1..d]. %% now we have time(1..d) available as search !
% time 1, player white
time[T], T#mod2==0  ::  turn[T,black]. 
time[T], T#mod2==1  ::  turn[T,white]. 

%% chooseC[Column,BitRepresentationOfColumn]
domC[C], domC[I], 2**(I-1) <= c  ::  chooseC[C,I-1,((C-1)/(2**(I-1)))#mod2]. 

?domC[C], domR[R] ::  board(C,R)?

----------
% Option 0 
#exist[T], chooseC[_,I,_], turn[T,black] ::  moveL(black,T).
#forall[T], chooseC[_,I,_], turn[T,white] ::  moveL(I,T).
-------
% Option 1 
chooseC[_,I,_], turn[T,black] ? moveL(black,T).
chooseC[_,I,_], turn[T,white] ! moveL(I,T).
-------
% Option 2
chooseC[_,I,_], turn[T,black] :?: moveL(black,T).
chooseC[_,I,_], turn[T,white] :!: moveL(I,T).
-------
% Option 3
#exist turn[T,black], chooseC[_,I,_] :: moveL(black,I,T).
#forall turn[T,white], chooseC[_,I,_] :: moveL(I,I,T).
-------
% Option 4
?[T], chooseC[_,I,_], turn[T,black] ::  moveL(I,T).
![T], chooseC[_,I,_], turn[T,white] ::  moveL(I,T).

============
% option 0

dom[X] :: dom[X+1]. 

#forall[1] :: q.
#exists[2] :: r.
#forall[3] :: t.

% option 1
[1] ? q.
[2] ! r.
[3] ? t.
% option 2
% option 3
#forall 1 :: q.
#exists 2 :: r.
#forall 3 :: t.
% option 4
?[1] :: q.
![2] :: r.
?[3] :: t.





% player chooses column 
turn[T,A], domC[C]                    ::  #exist(T) , move(A,C,T)?    
% in cell C,R there is a stone
domC[C], domR0[R], domT0[T]           ::  #exist(T) , occupied(C,R,T)? 
% Definition of 
domC[C], domR[R], C+(q-1)<=c, R<=r            ::  #exist(d) , winO(C,R,1)?
domC[C], domR[R], C<=c , R+(q-1)<=r           ::  #exist(d) , winO(C,R,0)?
domC[C], domR[R], dir[Z], C+q-1<=c,R+q-1<=r   ::  #exist(d) , winD(C,R,Z)?






white[A], domC[C]  ::
    occupied(C,r,T-1),    
     moveL(I,T) : chooseC[C,I,0], 
    time(T).


--------

white[A], domC[C], x[Z] ::
    occupied(C,r,T-1),    
    dom[Z] : Z != I : chooseC[C,I,0] : moveL(I,T,Z), 
    time(Z), 
    time(T).


--------

white[A], domC[C]  :: dom[Z] , Z != I , chooseC[C,I,0] ::
    occupied(C,r,T-1),    
    moveL(I,T,Z), 
    time(T).

--------

white[A], domC[C]  :: dom[Z] , Z != I , chooseC[C,I,0] ::
    occupied(C,r,T-1),    
     moveL(I,T,Z), 
    time(T).

=====

white[A], domC[C]  ::  
    occupied(C,r,T-1),    
    ~time(T),           
     moveL(I,T) : chooseC[C,I,0], 
    ~moveL(I,T) : chooseC[C,I,1], 
    move(A,C,T).        

----
choose[., 1;2, 0]
choose[., 2;3, 1]

time[T], white[A], domC[C]  :: 

chooseC[C,I,0], chooseC[C,I2,1] :: 


     occupied(C,r,T-1),    
    ~time(T),           
     moveL(I1,T), 
    ~moveL(I2,T), 
     move(A,C,T), 
     another(I1). 


     

     move(1,x), move(2,x), 
     ...

     another(1), another(2).

