%% set of edges: e[V1,V2] and the number of vertices n

depth[0..bits].
binary[0..bits].

succ[curr]. 
succ[next].

val[0..2**(bits+1)-1].

val[X], depth[I], 2**I <= nodes :: choose[X,I,(X/(2**I))#mod2]. 

#exists[bits-D-1], binary[I], depth[D] :: savitch(I,D)? 
#forall[bits-D], depth[D]              :: toggle(D)?
#exists[bits+1], binary[I], succ[X]    :: step(I,X)?

depth[D], binary[I] ::  ~toggle(D) |  depth[T], T<D :  toggle(T) |  savitch(I,D) | ~step(I,curr).
depth[D], binary[I] ::  ~toggle(D) |  depth[T], T<D :  toggle(T) | ~savitch(I,D) |  step(I,curr).
depth[D], binary[I] ::   toggle(D) |  depth[T], T<D : ~toggle(T) |  savitch(I,D) | ~step(I,next).
depth[D], binary[I] ::   toggle(D) |  depth[T], T<D : ~toggle(T) | ~savitch(I,D) |  step(I,next).

%% curr->next is not an non-edge A->B
map[A,A1], map[B,B1], ~e[A,B], A != B :: 
   choose[A1,I,1] : ~step(I,curr) | 
   choose[A1,I,0] :  step(I,curr) | 
   choose[B1,I,1] : ~step(I,next) | 
   choose[B1,I,0] :  step(I,next).

map[_,X] :: vv[X].
%% dont select non-nodes (X)
depth[D], val[X], ~vv[X] :: 
   choose[X,I,1] : ~savitch(I,D) | 
   choose[X,I,0] :  savitch(I,D).

%% if start and end of path -> 
%% /\ T =>  curr <=> s
s[S], map[S,X], choose[X,I,0]  :: depth[T] :  toggle(T) | ~step(I,curr).
s[S], map[S,X], choose[X,I,1]  :: depth[T] :  toggle(T) |  step(I,curr).
t[S], map[S,X], choose[X,I,0]  :: depth[T] : ~toggle(T) | ~step(I,next).
t[S], map[S,X], choose[X,I,1]  :: depth[T] : ~toggle(T) |  step(I,next).
