%%%%%% two symbols, 0 is blank symbol.  tape(L, S, T) means non-blank on that location.
%%%%%% 0 is the accepting state. 1 is the initial state.
%%%%%%%transition[SI, QI, SO, QO, D]. %%%%%%%% D=Direction    D=-1 left,    D=1 right
%%%%% tape assumed initially blank
%%%%% MACHINE resources %%%%%%%%%
#const t=6.
#const l=4.
time[0..t].
%cell[-l..l]. % head initially on location 0.
cell[0..2*l]. % head initially on location l.

#exists[T], time[T], cell[L], symb[B] :: tape(T, L, B)?
#exists[T], time[T], cell[L], type[Q] :: head(T, L, Q)?
#exists[T], time[T], transition[_SI, QI, SO, QO, D], ~universal[QI] :: move(T, QI, SO, QO, D)?
#forall[T], time[T], transition[_SI, QI, SO, QO, D],  universal[QI] :: move(T, QI, SO, QO, D)?
#exists[T], time[T], symb[S], universal[QI] :: cheat(T, S, QI)?
#exists[T], time[T], symb[S], universal[QI] :: cheat1(T, S, QI)? %%% didn't choose a move
#exists[T], time[T], symb[S], universal[QI] :: cheat2(T, S, QI)? %%% choose too many moves

time[T], symb[S], universal[QI] :: ~cheat(T, S, QI), cheat1(T, S, QI), cheat2(T, S, QI).

%%%%%%%%%%%% exist choice %%%%%%%%%%%%
time[T], cell[L], ~universal[QI], symb[SI], type[QI], QI!=0 :: ~head(T, L, QI), move(T, QI, SO, QO, D) : transition[SI, QI, SO, QO, D]. %%% non-horn
time[T], cell[L], ~universal[QI], transition[SI, QI, SO, QO, D], transition[SI, QI, SE, QE, E], SO!=SE :: ~head(T, L, QI), ~move(T, QI, SO, QO, D), ~move(T, QI, SE, QE, E).
time[T], cell[L], ~universal[QI], transition[SI, QI, SO, QO, D], transition[SI, QI, SE, QE, E], QO!=QE :: ~head(T, L, QI), ~move(T, QI, SO, QO, D), ~move(T, QI, SE, QE, E).
time[T], cell[L], ~universal[QI], transition[SI, QI, SO, QO, D], transition[SI, QI, SE, QE, E],  D!= E :: ~head(T, L, QI), ~move(T, QI, SO, QO, D), ~move(T, QI, SE, QE, E).

%%%%%%%%%%%% forall choice %%%%%%%%%%%%
time[T], cell[L],  universal[QI], transition[SI, QI, SO, QO, D] :: ~head(T, L, QI), ~cheat1(T, SI, QI), ~move(T, QI, SO, QO, D).
time[T], cell[L],  universal[QI], transition[SI, QI, SO, QO, D] :: ~head(T, L, QI), ~cheat2(T, SI, QI), ~move(T, QI, SO, QO, D).

%%%%%%%%%%%% initial configuration %%%%%%%%%%
cell[L], symb[S], S!=0 :: ~tape(0, L, S).
cell[L] :: tape(0, L, 0).
%head(0, 0, 1).
%cell[L], type[Q], L!=0 :: ~head(0, L, Q).
head(0, l, 1).
cell[L], type[Q], L!=l :: ~head(0, L, Q).
cell[L], type[Q], Q!=1 :: ~head(0, L, Q).
%time[T], type[Q] :: ~head(T, l, Q).
%time[T], type[Q] :: ~head(T, -l, Q).
time[T], type[Q] :: ~head(T, 0, Q).
time[T], type[Q] :: ~head(T, 2*l, Q).

%%%%%%%%% accepting condition %%%%%%%%%%%
cheat(T1, S, Q) : time[T1] : symb[S] : universal[Q], head(T, L, 0) : cell[L] : time[T].
head(T, L, 0) : cell[L] : time[T].

%%%%%%%%%%%% dynamics %%%%%%%%%%
time[T], transition[SI, QI, SO, QO, D], cell[L]                              :: ~head(T, L, QI), ~tape(T, L, SI), ~move(T, QI, SO, QO, D),  head(T+1, D+L, QO).
time[T], transition[SI, QI, SO, QO, D], cell[L], cell[LE], type[QE], QE!=QO  :: ~head(T, L, QI), ~tape(T, L, SI), ~move(T, QI, SO, QO, D), ~head(T+1, LE,  QE).
time[T], transition[SI, QI, SO, QO, D], cell[L], cell[LE], type[QE], LE!=D+L :: ~head(T, L, QI), ~tape(T, L, SI), ~move(T, QI, SO, QO, D), ~head(T+1, LE,  QE).
time[T], transition[SI, QI, SO, QO, D], cell[L]                              :: ~head(T, L, QI), ~tape(T, L, SI), ~move(T, QI, SO, QO, D),  tape(T+1, L, SO).
time[T], transition[SI, QI, SO, QO, D], cell[L], symb[SE], SE!=SO            :: ~head(T, L, QI), ~tape(T, L, SI), ~move(T, QI, SO, QO, D), ~tape(T+1, L, SE).

%%%%%% unaffected cells. / frame axioms %%%%%%%%
time[T], cell[L], type[Q], cell[LE], LE!=L, symb[S] :: ~head(T, L, Q), ~tape(T, LE, S),  tape(T+1, LE, S).
time[T], cell[L], type[Q], cell[LE], LE!=L, symb[S] :: ~head(T, L, Q),  tape(T, LE, S), ~tape(T+1, LE, S).
