package glob

import (
	"os"
)

var (
	Debug_file            *os.File
	Debug_filename        string // = flag.String("df", "", "File to print debug information.")
	Search_strategy_flag  string // = flag.String("search", "iterative", "Search objective iterative or binary.")
	Filename_flag         string // = flag.String("f", "test.pb", "Path of to PB file.")
	Cnf_tmp_flag          string // = flag.String("out", "", "If set: output cnf to this file.")
	Complex_flag          string // = flag.String("complex", "hybrid", "Solve complex PBs with mdd/sn/hybrid. Default is hybrid")
	Solver_flag           string // = flag.String("solver", "minisat", "Choose Solver: minisat/clasp/lingeling/glucose/CCandr/cmsat.")
	Debug_flag            bool   // = flag.Bool("d", false, "Print debug information.")
	Pbo_flag              bool   // = flag.Bool("pbo", false, "Reformat to pbo format, output to stdout.")
	Gringo_flag           bool   // = flag.Bool("gringo", false, "Reformat to Gringo format, output to stdout.")
	Gurobi_flag           bool   // = flag.Bool("gurobi", false, "Reformat to Gurobi input, output to stdout.")
	Solve_flag            bool   // = flag.Bool("solve", true, "Dont solve just categorize and analyze the constraints.")
	Dimacs_flag           bool   // = flag.Bool("dimacs", false, "Print readable format of clauses.")
	Stat_flag             bool   // = flag.Bool("stat", false, "Extended statistics on types of PBs in problem.")
	MDD_redundant_flag    bool   // = flag.Bool("mdd-redundant", true, "Reduce MDD by redundant nodes.")
	Opt_half_flag         bool   // = flag.Bool("opt-half", false, "Sets opt-bound to half the sum of the weights of the optimization function.")
	Amo_reuse_flag        bool   // = flag.Bool("amo-reuse", false, "Reuses AMO constraints for rewriting complex PBs.")
	Rewrite_opt_flag      bool   // = flag.Bool("opt-rewrite", true, "Rewrites opt with chains from AMO and other constraint.")
	Rewrite_same_flag     bool   // = flag.Bool("rewrite-same", false, "Groups same coefficients and introduces sorter and chains for them.")
	Rewrite_equal_flag    bool   // = flag.Bool("rewrite-equal", false, "Rewrites complex == constraints into >= and <=.")
	Ex_chain_flag         bool   // = flag.Bool("ex-chain", false, "Rewrites PBs with matching EXK constraints.")
	Amo_chain_flag        bool   // = flag.Bool("amo-chain", false, "Rewrites PBs with matching AMO. (buggy)")
	Infer_var_ids         bool   // = flag.Bool("infer-ids", false, "Tries to infer SAT variables Ids by convention v<id>.")
	Cat_flag              int    // = flag.Int("cat", 2, "Categorize method 1, or 2. (default 2, historic: 1).")
	Timeout_flag          int    // = flag.Int("timeout", 600, "Timeout of the overall solving process")
	MDD_max_flag          int    // = flag.Int("mdd-max", 2000000, "Maximal number of MDD Nodes in processing one PB.")
	Len_rewrite_same_flag int    // = flag.Int("len-rewrite-same", 3, "Min length to rewrite PB.")
	Len_rewrite_amo_flag  int    // = flag.Int("len-rewrite-amo", 3, "Min length to rewrite PB.")
	Len_rewrite_ex_flag   int    // = flag.Int("len-rewrite-ex", 3, "Min length to rewrite PB.")
	First_aux_id_flag     int    // = flag.Int("aux-id", 1, "Set initial variable counter for auxiliary Ids.")
	Opt_bound_flag        int64  // = flag.Int64("opt-bound", math.MaxInt64, "Initial bound for optimization function <= given value. Negative values allowed. Default is largest upper bound.")
	Seed_flag             int64  // = flag.Int64("seed", 42, "Random seed initializer.")
)
